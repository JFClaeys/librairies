#ifndef ALPHAS_LIB_H
#define ALPHAS_LIB_H
/*enum SeqType {
  sqDATA,    //data is to be used as such
  sqCHAR     //data will be the xth cahr in alphas array  
};*/

typedef struct {
  byte Data;   // what to display
  byte Delay;  // how long to display it
  byte seqtype;
} TSeqElem;

#define NUM_LINES_CHAR 6

typedef struct {
   /* |
      V
      .  .  .  .  . .
      .  x  x  x  . .
      x  .  .  .  x .
      x  .  .  .  x .
      x  .  .  .  x .
      x  x  x  x  x .
      x  .  .  .  x .
      x  .  .  .  x .

     =   =  =  =  =
     3F 44 44 44 3F
   */
   byte drawing[NUM_LINES_CHAR];
} TAscii;

/*this array is coded from left to right,
  since that is the movement the handle will use
*/

enum LettersToIndex {
  letter_A =  0,
  letter_B =  1,
  letter_C =  2,
  letter_D =  3,
  letter_E =  4,
  letter_F =  5,
  letter_G =  6,
  letter_H =  7,
  letter_I =  8,
  letter_J =  9,
  letter_K = 10,
  letter_L = 11,
  letter_M = 12,
  letter_N = 13,
  letter_O = 14,
  letter_P = 15,
  letter_Q = 16,
  letter_R = 17,
  letter_S = 18,
  letter_T = 19,
  letter_U = 20,
  letter_V = 21,
  letter_W = 22,
  letter_X = 23,
  letter_Y = 24,
  letter_Z = 25,
  letter_SPACE = 26,
  letter_dot   = 27,
  letter_exclam = 28,
};




const TAscii alphas[] PROGMEM = {
  { 0x3F, 0x44, 0x44, 0x44, 0x3F, 0x00 },   // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 },   // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 },   // C
  { 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 },   // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 },   // E
  { 0x7F, 0x48, 0x48, 0x48, 0x40, 0x00 },   // F
  { 0x3E, 0x41, 0x49, 0x49, 0x2E, 0x00 },   // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 },   // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 },   // I
  { 0x02, 0x01, 0x41, 0x7E, 0x40, 0x00 },   // J
  { 0x7F, 0x08, 0x08, 0x18, 0x67, 0x00 },   // K
  { 0x7F, 0x01, 0x01, 0x01, 0x00, 0x00 },   // L
  { 0x3F, 0x20, 0x38, 0x20, 0x3F, 0x00 },   // M
  { 0x7F, 0x20, 0x16, 0x08, 0x7F, 0x00 },   // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 },   // O
  { 0x7F, 0x48, 0x48, 0x48, 0x30, 0x00 },   // P
  { 0x3E, 0x41, 0x41, 0x42, 0x3D, 0x00 },   // Q
  { 0x7F, 0x48, 0x48, 0x48, 0x37, 0x00 },   // R
  { 0x31, 0x49, 0x49, 0x49, 0x46, 0x00 },   // S
  { 0x40, 0x40, 0x7F, 0x40, 0x40, 0x00 },   // T
  { 0x7E, 0x01, 0x01, 0x01, 0x7E, 0x00 },   // U
  { 0x78, 0x06, 0x01, 0x06, 0x78, 0x00 },   // V
  { 0x7F, 0x01, 0x1E, 0x01, 0x7F, 0x00 },   // W
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 },   // X
  { 0x70, 0x08, 0x07, 0x08, 0x70, 0x00 },   // Y
  { 0x43, 0x45, 0x49, 0x51, 0x61, 0x00 },   // Z
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // SPACE
  { 0x00, 0x00, 0x00, 0x03, 0x03, 0x00 },   // dot
  { 0x00, 0x00, 0xFB, 0xFB, 0x00, 0x00 }    // exclamation
};

#define NUM_OF(x) (sizeof(x)/sizeof(x[0]))

#endif// ALPHAS_LIB_H